// Generated by Dagger (https://google.github.io/dagger).
package com.example.Fabulous.component;

import android.content.Context;
import com.example.Fabulous.ApiService;
import com.example.Fabulous.MyApplication;
import com.example.Fabulous.module.ContextModule;
import com.example.Fabulous.module.ContextModule_ProvidesContextFactory;
import com.example.Fabulous.module.RetrofitModule;
import com.example.Fabulous.module.RetrofitModule_GetHttpLoggingInterceptorFactory;
import com.example.Fabulous.module.RetrofitModule_GetOkHttpClientFactory;
import com.example.Fabulous.module.RetrofitModule_GetRetrofitFactory;
import com.example.Fabulous.module.RetrofitModule_ProvideApiServiceFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<HttpLoggingInterceptor> getHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> getOkHttpClientProvider;

  private Provider<Retrofit> getRetrofitProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<Context> providesContextProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.getHttpLoggingInterceptorProvider =
        DoubleCheck.provider(
            RetrofitModule_GetHttpLoggingInterceptorFactory.create(builder.retrofitModule));
    this.getOkHttpClientProvider =
        DoubleCheck.provider(
            RetrofitModule_GetOkHttpClientFactory.create(
                builder.retrofitModule, getHttpLoggingInterceptorProvider));
    this.getRetrofitProvider =
        DoubleCheck.provider(
            RetrofitModule_GetRetrofitFactory.create(
                builder.retrofitModule, getOkHttpClientProvider));
    this.provideApiServiceProvider =
        DoubleCheck.provider(
            RetrofitModule_ProvideApiServiceFactory.create(
                builder.retrofitModule, getRetrofitProvider));
    this.providesContextProvider =
        DoubleCheck.provider(ContextModule_ProvidesContextFactory.create(builder.contextModule));
  }

  @Override
  public ApiService getApiService() {
    return provideApiServiceProvider.get();
  }

  @Override
  public Context getContext() {
    return providesContextProvider.get();
  }

  @Override
  public void injectApplication(MyApplication application) {}

  public static final class Builder {
    private RetrofitModule retrofitModule;

    private ContextModule contextModule;

    private Builder() {}

    public ApplicationComponent build() {
      if (retrofitModule == null) {
        this.retrofitModule = new RetrofitModule();
      }
      if (contextModule == null) {
        throw new IllegalStateException(ContextModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerApplicationComponent(this);
    }

    public Builder contextModule(ContextModule contextModule) {
      this.contextModule = Preconditions.checkNotNull(contextModule);
      return this;
    }

    public Builder retrofitModule(RetrofitModule retrofitModule) {
      this.retrofitModule = Preconditions.checkNotNull(retrofitModule);
      return this;
    }
  }
}
