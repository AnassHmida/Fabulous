// Generated by Dagger (https://google.github.io/dagger).
package com.example.Fabulous.component;

import android.content.Context;
import com.example.Fabulous.ApiService;
import com.example.Fabulous.LoginActivity;
import com.example.Fabulous.LoginActivityContract;
import com.example.Fabulous.LoginActivity_MembersInjector;
import com.example.Fabulous.LoginPresenterImpl;
import com.example.Fabulous.module.LoginActivityContextModule;
import com.example.Fabulous.module.LoginActivityContextModule_ProvidesContextFactory;
import com.example.Fabulous.module.LoginActivityMvpModule;
import com.example.Fabulous.module.LoginActivityMvpModule_ProvidePresenterFactory;
import com.example.Fabulous.module.LoginActivityMvpModule_ProvideViewFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerLoginActivityComponent implements LoginActivityComponent {
  private ApplicationComponent applicationComponent;

  private Provider<Context> providesContextProvider;

  private com_example_rxjavadependencyinjection_component_ApplicationComponent_getApiService
      getApiServiceProvider;

  private Provider<LoginActivityContract.View> provideViewProvider;

  private Provider<LoginPresenterImpl> providePresenterProvider;

  private DaggerLoginActivityComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.providesContextProvider =
        DoubleCheck.provider(
            LoginActivityContextModule_ProvidesContextFactory.create(
                builder.loginActivityContextModule));
    this.applicationComponent = builder.applicationComponent;
    this.getApiServiceProvider =
        new com_example_rxjavadependencyinjection_component_ApplicationComponent_getApiService(
            builder.applicationComponent);
    this.provideViewProvider =
        DoubleCheck.provider(
            LoginActivityMvpModule_ProvideViewFactory.create(builder.loginActivityMvpModule));
    this.providePresenterProvider =
        DoubleCheck.provider(
            LoginActivityMvpModule_ProvidePresenterFactory.create(
                builder.loginActivityMvpModule, getApiServiceProvider, provideViewProvider));
  }

  @Override
  public Context getContext() {
    return providesContextProvider.get();
  }

  @Override
  public void injectLoginActivity(LoginActivity loginActivity) {
    injectLoginActivity2(loginActivity);
  }

  private LoginActivity injectLoginActivity2(LoginActivity instance) {
    LoginActivity_MembersInjector.injectContext(
        instance,
        Preconditions.checkNotNull(
            applicationComponent.getContext(),
            "Cannot return null from a non-@Nullable component method"));
    LoginActivity_MembersInjector.injectActivityContext(instance, providesContextProvider.get());
    LoginActivity_MembersInjector.injectLoginPresenter(instance, providePresenterProvider.get());
    return instance;
  }

  public static final class Builder {
    private LoginActivityContextModule loginActivityContextModule;

    private LoginActivityMvpModule loginActivityMvpModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public LoginActivityComponent build() {
      if (loginActivityContextModule == null) {
        throw new IllegalStateException(
            LoginActivityContextModule.class.getCanonicalName() + " must be set");
      }
      if (loginActivityMvpModule == null) {
        throw new IllegalStateException(
            LoginActivityMvpModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerLoginActivityComponent(this);
    }

    public Builder loginActivityContextModule(
        LoginActivityContextModule loginActivityContextModule) {
      this.loginActivityContextModule = Preconditions.checkNotNull(loginActivityContextModule);
      return this;
    }

    public Builder loginActivityMvpModule(LoginActivityMvpModule loginActivityMvpModule) {
      this.loginActivityMvpModule = Preconditions.checkNotNull(loginActivityMvpModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }

  private static
  class com_example_rxjavadependencyinjection_component_ApplicationComponent_getApiService
      implements Provider<ApiService> {
    private final ApplicationComponent applicationComponent;

    com_example_rxjavadependencyinjection_component_ApplicationComponent_getApiService(
        ApplicationComponent applicationComponent) {
      this.applicationComponent = applicationComponent;
    }

    @Override
    public ApiService get() {
      return Preconditions.checkNotNull(
          applicationComponent.getApiService(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
