// Generated by Dagger (https://google.github.io/dagger).
package com.example.Fabulous.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class RetrofitModule_GetRetrofitFactory implements Factory<Retrofit> {
  private final RetrofitModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public RetrofitModule_GetRetrofitFactory(
      RetrofitModule module, Provider<OkHttpClient> okHttpClientProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public Retrofit get() {
    return Preconditions.checkNotNull(
        module.getRetrofit(okHttpClientProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static RetrofitModule_GetRetrofitFactory create(
      RetrofitModule module, Provider<OkHttpClient> okHttpClientProvider) {
    return new RetrofitModule_GetRetrofitFactory(module, okHttpClientProvider);
  }

  public static Retrofit proxyGetRetrofit(RetrofitModule instance, OkHttpClient okHttpClient) {
    return Preconditions.checkNotNull(
        instance.getRetrofit(okHttpClient),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
