// Generated by Dagger (https://google.github.io/dagger).
package com.example.Fabulous.module;

import com.example.Fabulous.ApiService;
import com.example.Fabulous.LoginActivityContract;
import com.example.Fabulous.LoginPresenterImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class LoginActivityMvpModule_ProvidePresenterFactory
    implements Factory<LoginPresenterImpl> {
  private final LoginActivityMvpModule module;

  private final Provider<ApiService> apiServiceProvider;

  private final Provider<LoginActivityContract.View> mViewProvider;

  public LoginActivityMvpModule_ProvidePresenterFactory(
      LoginActivityMvpModule module,
      Provider<ApiService> apiServiceProvider,
      Provider<LoginActivityContract.View> mViewProvider) {
    this.module = module;
    this.apiServiceProvider = apiServiceProvider;
    this.mViewProvider = mViewProvider;
  }

  @Override
  public LoginPresenterImpl get() {
    return Preconditions.checkNotNull(
        module.providePresenter(apiServiceProvider.get(), mViewProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static LoginActivityMvpModule_ProvidePresenterFactory create(
      LoginActivityMvpModule module,
      Provider<ApiService> apiServiceProvider,
      Provider<LoginActivityContract.View> mViewProvider) {
    return new LoginActivityMvpModule_ProvidePresenterFactory(
        module, apiServiceProvider, mViewProvider);
  }

  public static LoginPresenterImpl proxyProvidePresenter(
      LoginActivityMvpModule instance, ApiService apiService, LoginActivityContract.View mView) {
    return Preconditions.checkNotNull(
        instance.providePresenter(apiService, mView),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
