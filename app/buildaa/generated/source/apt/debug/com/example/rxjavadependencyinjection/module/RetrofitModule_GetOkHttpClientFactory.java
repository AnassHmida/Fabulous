// Generated by Dagger (https://google.github.io/dagger).
package com.example.Fabulous.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

public final class RetrofitModule_GetOkHttpClientFactory implements Factory<OkHttpClient> {
  private final RetrofitModule module;

  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  public RetrofitModule_GetOkHttpClientFactory(
      RetrofitModule module, Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    this.module = module;
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.getOkHttpClient(httpLoggingInterceptorProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static RetrofitModule_GetOkHttpClientFactory create(
      RetrofitModule module, Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    return new RetrofitModule_GetOkHttpClientFactory(module, httpLoggingInterceptorProvider);
  }

  public static OkHttpClient proxyGetOkHttpClient(
      RetrofitModule instance, HttpLoggingInterceptor httpLoggingInterceptor) {
    return Preconditions.checkNotNull(
        instance.getOkHttpClient(httpLoggingInterceptor),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
