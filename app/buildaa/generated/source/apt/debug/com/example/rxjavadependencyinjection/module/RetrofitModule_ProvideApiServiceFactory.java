// Generated by Dagger (https://google.github.io/dagger).
package com.example.Fabulous.module;

import com.example.Fabulous.ApiService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class RetrofitModule_ProvideApiServiceFactory implements Factory<ApiService> {
  private final RetrofitModule module;

  private final Provider<Retrofit> retrofitProvider;

  public RetrofitModule_ProvideApiServiceFactory(
      RetrofitModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ApiService get() {
    return Preconditions.checkNotNull(
        module.provideApiService(retrofitProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static RetrofitModule_ProvideApiServiceFactory create(
      RetrofitModule module, Provider<Retrofit> retrofitProvider) {
    return new RetrofitModule_ProvideApiServiceFactory(module, retrofitProvider);
  }

  public static ApiService proxyProvideApiService(RetrofitModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.provideApiService(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
