// Generated by Dagger (https://google.github.io/dagger).
package com.example.Fabulous;

import dagger.internal.Factory;
import javax.inject.Provider;

public final class LoginPresenterImpl_Factory implements Factory<LoginPresenterImpl> {
  private final Provider<ApiService> apiServiceProvider;

  private final Provider<LoginActivityContract.View> mViewProvider;

  public LoginPresenterImpl_Factory(
      Provider<ApiService> apiServiceProvider, Provider<LoginActivityContract.View> mViewProvider) {
    this.apiServiceProvider = apiServiceProvider;
    this.mViewProvider = mViewProvider;
  }

  @Override
  public LoginPresenterImpl get() {
    return new LoginPresenterImpl(apiServiceProvider.get(), mViewProvider.get());
  }

  public static LoginPresenterImpl_Factory create(
      Provider<ApiService> apiServiceProvider, Provider<LoginActivityContract.View> mViewProvider) {
    return new LoginPresenterImpl_Factory(apiServiceProvider, mViewProvider);
  }
}
